# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.3
        environment:
            BUNDLE_JOBS: 3
            BUNDLE_RETRY: 3
            BUNDLE_PATH: vendor/bundle
            PGHOST: 127.0.0.1
            PGUSER: target_api_user
            RAILS_ENV: test

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:10-alpine  # service image
        environment:
          POSTGRES_USER: target_api_user
          POSTGRES_DB: target_api_test
          POSTGRES_PASSWORD: 

    working_directory: ~/target_api

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: cp .circleci/database.yml config/database.yml
      - run: cp .circleci/application.yml config/application.yml
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      - run: bundle exec rake db:seed

      # run tests!
      - run:
          name: run tests
          command: RAILS_ENV=test bundle exec rspec

      # run code_analysis!
      - run:
          name: run code analysis
          command: RAILS_ENV=test bundle exec rake code_analysis  

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results